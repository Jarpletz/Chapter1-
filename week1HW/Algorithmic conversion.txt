

convert hex to base 10 algorithmically______________
1).Begin from the right digit
2).Rase 16 to the nth power
3).Multiply by the base 10 corrosponding value for the digit.
4).Add value to total base 10 value
5).Increase n and repeat 1-4 until completed for left most digit.


convert binary to base 10 algorithmically______________
1).int n= 0;
2).Begin from the right digit
3).2^n * the (n+1)th digit (where the 1st is the rightmost digit)
4).Add value to total base 10 value
5).Increase n and repeat 3&4 until completed for left most digit.

convert base 10 to binary algorithmically______________
1). int n=0;
2). int value= the base 10 number
3). while( 2^n < value){n++}
4). while(n>=0){
5).    n-=1;
5).    if(2^n<value){
6).       add a "1" digit to the right side of the binary value
7).       value-=2^n; }
8).    else{  add a "0" digit to the right side of the binary value }
    }
9). output binary value

convert base 10 to hex algorithmically______________
int n=0;
int value= the base 10 number
while( 2^n < value){n++} 
while(n>=0){
    int testValue=0;
    n-=1;
    while(addedValue<value){ testValue+=16^n;}
    testValue-=16^n;
    value-=testValue;
    testValue/=16^n;
    convert testValue to Hex corresponding 0-15 digit, add digit to the right of the hex Output
}

Data Encription Algorithm:_________________
* Note: I am drawing upon my limited previous knowledge of encription, most of which is from several years ago.
I have never used any sort of RandomSeed, but to my knowledge (which may very well be flawed) this is how they work.

Setup:
-The Sender and the Reciever will each have a predetermined float set as their randomSeed,
as well as a random predetermined start position in this random seed

To Encode:
int n= position in Random seed's sequence
for(int i=0; i<characters in string; i++){
    -convert char[i] into its corresponding base-10 ASCII value
    -multiply by nth random number in random seed sequence 
    n++;
    -convert to string form, add space as right mosst character, add to right side of final string
}
Once repeated for all characters, send final string to reciever.

To decode:
int n= position in Random seed's sequence- must be same as sender's initial r value
-in order from left to right, seperate number characters into groups, where a space indicates the start of a new character group
for(int i=0; i<number of groups; i++){
   -take the digits in the group, convert back to float
   -devide by nth random number in random seed sequence 
   Because they are subtracting a number determined by the same seed and starting place as the sender, they should get the original base-10 ASCII value. 
   n++;
   -convert resulting value to ASCII corresponding character, add to character string
}
returns: original message!